{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-12-01T12:36:34.32831Z\",\"iopub.execute_input\":\"2021-12-01T12:36:34.329098Z\",\"iopub.status.idle\":\"2021-12-01T12:36:34.478143Z\",\"shell.execute_reply.started\":\"2021-12-01T12:36:34.328964Z\",\"shell.execute_reply\":\"2021-12-01T12:36:34.477167Z\"}}\n################## 시험 안내 문구 및 코드 ##################\n# 출력을 원하실 경우 print() 함수 활용\n# 예시) print(df.head())\n\n# getcwd(), chdir() 등 작업 폴더 설정 불필요\n# 파일 경로 상 내부 드라이브 경로(C: 등) 접근 불가\n\n# 데이터 파일 읽기 예제\nimport pandas as pd\nX_test = pd.read_csv(\"../input/hr-data/X_test.csv\")\nX_train = pd.read_csv(\"../input/hr-data/X_train.csv\")\ny_train = pd.read_csv(\"../input/hr-data/y_train.csv\")\n\n# 사용자 코딩\n\nX_train.drop(['city','enrollee_id','gender','major_discipline','company_size','company_type'], axis = 1, inplace = True)\nen_id = X_test.enrollee_id\nX_test.drop(['city','enrollee_id','gender','major_discipline','company_size','company_type'], axis = 1, inplace = True)\n\n\nX_train.enrolled_university.fillna(X_train.enrolled_university.value_counts().index[0], inplace = True)\nX_train.education_level.fillna(X_train.education_level.value_counts().index[0], inplace = True)\nX_train.experience.fillna(X_train.experience.value_counts().index[0], inplace = True)\nX_train.last_new_job.fillna(X_train.last_new_job.value_counts().index[0], inplace = True)\nX_test.enrolled_university.fillna(X_test.enrolled_university.value_counts().index[0], inplace = True)\nX_test.education_level.fillna(X_test.education_level.value_counts().index[0], inplace = True)\nX_test.experience.fillna(X_test.experience.value_counts().index[0], inplace = True)\nX_test.last_new_job.fillna(X_test.last_new_job.value_counts().index[0], inplace = True)\n\n### 원핫인코딩\n# print(X_train.info())\n# city = pd.get_dummies(X_train.city, drop_first = True)\nrelevent_experience = pd.get_dummies(X_train.relevent_experience, drop_first = True)\nenrolled_university = pd.get_dummies(X_train.enrolled_university, drop_first = True)\neducation_level  = pd.get_dummies(X_train.education_level, drop_first = True)\nexperience = pd.get_dummies(X_train.experience, drop_first = True)\nlast_new_job = pd.get_dummies(X_train.last_new_job, drop_first = True)\n# xcity = pd.get_dummies(X_test.city, drop_first = True)\nxrelevent_experience = pd.get_dummies(X_test.relevent_experience, drop_first = True)\nxenrolled_university = pd.get_dummies(X_test.enrolled_university, drop_first = True)\nxeducation_level  = pd.get_dummies(X_test.education_level, drop_first = True)\nxexperience = pd.get_dummies(X_test.experience, drop_first = True)\nxlast_new_job = pd.get_dummies(X_test.last_new_job, drop_first = True)\ndf_list = [ relevent_experience, enrolled_university, education_level,experience, last_new_job, X_train.training_hours ]\nxdf_list = [ xrelevent_experience, xenrolled_university, xeducation_level,xexperience, xlast_new_job, X_test.training_hours ]\ndf = pd.concat(df_list, axis = 1)\nxdf = pd.concat(xdf_list, axis = 1)\nprint(df.shape)\nprint(xdf.shape)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\ny = y_train.target\nx = df.copy()\nx_train, x_val, yy, yy_val = train_test_split(x, y, test_size = 0.3, random_state = 144, stratify = y)\n\nparams = { 'max_depth' : [18, 20, 22, 24],\n         'n_estimators' : [40, 50, 60]}\n\nRF = RandomForestClassifier()\ngrid = GridSearchCV(RF, params)\ngrid.fit(x_train, yy)\nprint(grid.best_score_)\nprint(grid.best_params_)\nprint(y_train)\nbest_md = grid.best_estimator_\nanswer = best_md.predict(xdf)\nsubmit = pd.DataFrame(en_id)\nsubmit['target'] = answer\nprint(submit.columns)\n# 답안 제출 참고\n# 아래 코드 예측변수와 수험번호를 개인별로 변경하여 활용\n# pd.DataFrame({'enrollee_id': X_test.enrollee_id, 'target': pred}).to_csv('003000000.csv', index=False)\n\n\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [markdown]\n# ## 체점\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-12-01T12:36:34.479577Z\",\"iopub.execute_input\":\"2021-12-01T12:36:34.479846Z\",\"iopub.status.idle\":\"2021-12-01T12:36:34.484073Z\",\"shell.execute_reply.started\":\"2021-12-01T12:36:34.479816Z\",\"shell.execute_reply\":\"2021-12-01T12:36:34.482823Z\"}}\n# 체점(아래 주석 풀로 체점)\n# import pickle\n# import numpy as np\n# from sklearn.metrics import roc_auc_score\n\n# with open( \"../input/hr-data/answer.pickle\", \"rb\" ) as file:\n#     ans = pickle.load(file)\n#     ans = pd.DataFrame(ans)\n# print(roc_auc_score(ans['target'], pred))","metadata":{"_uuid":"00472b86-3599-42fd-b31a-fda6a63cdd0d","_cell_guid":"2b85775d-89b8-443c-8185-b35b033dd1c1","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2021-12-03T12:06:29.136903Z","iopub.execute_input":"2021-12-03T12:06:29.137751Z","iopub.status.idle":"2021-12-03T12:07:02.128132Z","shell.execute_reply.started":"2021-12-03T12:06:29.137708Z","shell.execute_reply":"2021-12-03T12:07:02.126116Z"},"trusted":true},"execution_count":53,"outputs":[]}]}